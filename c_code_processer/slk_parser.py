import abc


class SLKConstants(object):
    def __init__(self):
        self.END_OF_SLK_INPUT_ = 86
        self.START_SYMBOL = 87
        self.START_STATE = 0
        self.START_CONFLICT = 312
        self.END_CONFLICT = 326
        self.START_ACTION = 230
        self.END_ACTION = 234
        self.TOTAL_CONFLICTS = 14
        self.NOT_A_SYMBOL = 0
        self.NONTERMINAL_SYMBOL = 1
        self.TERMINAL_SYMBOL = 2
        self.ACTION_SYMBOL = 3

        self._production = [0
            , 2, 87, 161, 3, 88, 109, 91, 4, 88, 93, 162, 89, 6, 88, 1, 93, 163, 164, 2
            , 3, 89, 109, 90, 2, 89, 2, 2, 90, 91, 4, 90, 165, 166, 2, 3, 91, 167, 128
            , 5, 92, 93, 168, 169, 2, 6, 92, 1, 93, 170, 171, 2, 2, 93, 94
            , 2, 93, 95, 2, 93, 96, 2, 94, 5, 2, 94, 6, 2, 94, 7, 2, 94, 8
            , 2, 95, 9, 2, 95, 10, 2, 95, 11, 2, 95, 12, 2, 95, 13, 2, 95, 14
            , 2, 95, 15, 2, 95, 16, 2, 95, 17, 2, 95, 97, 2, 95, 106, 2, 95, 18
            , 2, 96, 19, 2, 96, 20, 4, 97, 98, 21, 172, 5, 97, 98, 22, 99, 23
            , 2, 98, 24, 2, 98, 25, 6, 99, 103, 173, 104, 2, 174, 3, 100, 102, 175
            , 4, 101, 102, 231, 176, 3, 102, 109, 177, 2, 103, 95, 2, 103, 96, 3, 104, 105, 178
            , 3, 105, 109, 179, 3, 105, 26, 137, 5, 106, 27, 22, 107, 23, 4, 106, 27, 21, 180
            , 3, 107, 108, 181, 3, 108, 21, 182, 3, 109, 183, 110, 3, 110, 21, 111
            , 5, 110, 28, 109, 29, 111, 5, 111, 30, 184, 31, 111, 7, 111, 232, 28, 113, 233, 29, 111
            , 5, 111, 28, 185, 29, 111, 1, 111, 4, 112, 32, 186, 187, 4, 113, 114, 188, 189
            , 4, 114, 93, 190, 191, 2, 115, 116, 3, 115, 112, 192, 3, 116, 21, 117
            , 5, 116, 28, 115, 29, 117, 5, 116, 30, 193, 31, 117, 5, 116, 28, 194, 29, 117
            , 5, 117, 30, 195, 31, 117, 5, 117, 28, 113, 29, 117, 5, 117, 28, 196, 29, 117
            , 1, 117, 3, 118, 21, 197, 2, 119, 134, 5, 119, 22, 120, 198, 23, 3, 120, 119, 199
            , 4, 121, 103, 200, 201, 3, 122, 112, 202, 2, 122, 123, 5, 123, 28, 122, 29, 124
            , 5, 123, 30, 203, 31, 124, 5, 123, 28, 204, 29, 124, 5, 124, 30, 205, 31, 124
            , 5, 124, 28, 206, 29, 124, 1, 124, 2, 125, 126, 2, 125, 127, 2, 125, 128
            , 2, 125, 129, 2, 125, 131, 2, 125, 132, 4, 126, 21, 26, 125, 5, 126, 34, 137, 26, 125
            , 4, 126, 35, 26, 125, 3, 127, 207, 2, 6, 128, 232, 22, 208, 209, 23
            , 7, 129, 36, 28, 133, 29, 125, 130, 6, 129, 37, 28, 133, 29, 125, 3, 130, 38, 125
            , 1, 130, 6, 131, 39, 28, 133, 29, 125, 8, 131, 40, 125, 39, 28, 133, 29, 2
            , 10, 131, 41, 28, 210, 2, 211, 2, 212, 29, 125, 4, 132, 42, 21, 2
            , 3, 132, 43, 2, 3, 132, 44, 2, 4, 132, 45, 213, 2, 3, 133, 134, 214
            , 3, 134, 136, 215, 2, 135, 3, 2, 135, 46, 2, 135, 47, 2, 135, 48
            , 2, 135, 49, 2, 135, 50, 2, 135, 51, 2, 135, 52, 2, 135, 53, 2, 135, 54
            , 2, 135, 55, 3, 136, 138, 216, 2, 137, 136, 3, 138, 139, 217, 3, 139, 140, 218
            , 3, 140, 141, 219, 3, 141, 142, 220, 3, 142, 143, 221, 3, 143, 145, 222
            , 2, 144, 62, 2, 144, 63, 3, 145, 147, 223, 2, 146, 64, 2, 146, 65
            , 2, 146, 66, 2, 146, 67, 3, 147, 149, 224, 2, 148, 68, 2, 148, 69
            , 3, 149, 151, 225, 2, 150, 70, 2, 150, 71, 3, 151, 153, 226, 2, 152, 32
            , 2, 152, 72, 2, 152, 73, 2, 153, 154, 5, 153, 28, 121, 29, 153, 2, 154, 156
            , 3, 154, 74, 154, 3, 154, 75, 154, 3, 154, 155, 153, 3, 154, 76, 154
            , 5, 154, 76, 28, 121, 29, 2, 155, 61, 2, 155, 32, 2, 155, 70, 2, 155, 71
            , 2, 155, 77, 2, 155, 78, 3, 156, 158, 157, 5, 157, 30, 133, 31, 157
            , 5, 157, 28, 227, 29, 157, 4, 157, 79, 21, 157, 4, 157, 80, 21, 157
            , 3, 157, 74, 157, 3, 157, 75, 157, 1, 157, 2, 158, 21, 2, 158, 160
            , 3, 158, 81, 228, 4, 158, 28, 133, 29, 3, 159, 134, 229, 2, 160, 82
            , 2, 160, 83, 2, 160, 84, 2, 160, 85, 3, 161, 88, 161, 2, 161, 230
            , 3, 162, 93, 162, 1, 162, 3, 163, 93, 163, 1, 163, 2, 164, 101, 1, 164
            , 3, 165, 3, 119, 1, 165, 4, 166, 4, 102, 166, 1, 166, 3, 167, 92, 167
            , 1, 167, 3, 168, 93, 168, 1, 168, 2, 169, 100, 1, 169, 3, 170, 93, 170
            , 1, 170, 2, 171, 101, 1, 171, 4, 172, 22, 99, 23, 1, 172, 3, 173, 103, 173
            , 1, 173, 6, 174, 103, 173, 104, 2, 174, 1, 174, 4, 175, 4, 102, 175
            , 1, 175, 5, 176, 4, 102, 231, 176, 1, 176, 3, 177, 3, 119, 1, 177
            , 4, 178, 4, 105, 178, 1, 178, 3, 179, 26, 137, 1, 179, 4, 180, 22, 107, 23
            , 1, 180, 4, 181, 4, 108, 181, 1, 181, 3, 182, 3, 137, 1, 182, 2, 183, 112
            , 1, 183, 2, 184, 137, 1, 184, 2, 185, 118, 1, 185, 3, 186, 96, 186
            , 1, 186, 2, 187, 112, 1, 187, 4, 188, 4, 114, 188, 1, 188, 3, 189, 4, 33
            , 1, 189, 3, 190, 93, 190, 1, 190, 2, 191, 115, 1, 191, 2, 192, 116
            , 1, 192, 2, 193, 137, 1, 193, 2, 194, 113, 1, 194, 2, 195, 137, 1, 195
            , 2, 196, 118, 1, 196, 4, 197, 4, 21, 197, 1, 197, 2, 198, 4, 1, 198
            , 4, 199, 4, 119, 199, 1, 199, 3, 200, 103, 200, 1, 200, 2, 201, 122
            , 1, 201, 2, 202, 123, 1, 202, 2, 203, 137, 1, 203, 2, 204, 113, 1, 204
            , 2, 205, 137, 1, 205, 2, 206, 113, 1, 206, 2, 207, 133, 1, 207, 3, 208, 92, 208
            , 1, 208, 3, 209, 125, 209, 2, 209, 233, 2, 210, 133, 1, 210, 2, 211, 133
            , 1, 211, 2, 212, 133, 1, 212, 2, 213, 133, 1, 213, 4, 214, 4, 134, 214
            , 1, 214, 3, 215, 135, 134, 1, 215, 5, 216, 56, 133, 26, 136, 1, 216
            , 4, 217, 57, 139, 217, 1, 217, 4, 218, 58, 140, 218, 1, 218, 4, 219, 59, 141, 219
            , 1, 219, 4, 220, 60, 142, 220, 1, 220, 4, 221, 61, 143, 221, 1, 221
            , 4, 222, 144, 145, 222, 1, 222, 4, 223, 146, 147, 223, 1, 223, 4, 224, 148, 149, 224
            , 1, 224, 4, 225, 150, 151, 225, 1, 225, 4, 226, 152, 153, 226, 1, 226
            , 2, 227, 159, 1, 227, 3, 228, 81, 228, 1, 228, 4, 229, 4, 134, 229
            , 1, 229
            , 0]
        self._production_row = [0
            , 1, 4, 8, 13, 20, 24, 27, 30, 35, 39, 45, 52, 55, 58, 61, 64
            , 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112
            , 115, 120, 126, 129, 132, 139, 143, 148, 152, 155, 158, 162, 166, 170, 176, 181
            , 185, 189, 193, 197, 203, 209, 217, 223, 225, 230, 235, 240, 243, 247, 251, 257
            , 263, 269, 275, 281, 287, 289, 293, 296, 302, 306, 311, 315, 318, 324, 330, 336
            , 342, 348, 350, 353, 356, 359, 362, 365, 368, 373, 379, 384, 388, 395, 403, 410
            , 414, 416, 423, 432, 443, 448, 452, 456, 461, 465, 469, 472, 475, 478, 481, 484
            , 487, 490, 493, 496, 499, 502, 506, 509, 513, 517, 521, 525, 529, 533, 536, 539
            , 543, 546, 549, 552, 555, 559, 562, 565, 569, 572, 575, 579, 582, 585, 588, 591
            , 597, 600, 604, 608, 612, 616, 622, 625, 628, 631, 634, 637, 640, 644, 650, 656
            , 661, 666, 670, 674, 676, 679, 682, 686, 691, 695, 698, 701, 704, 707, 711, 714
            , 718, 720, 724, 726, 729, 731, 735, 737, 742, 744, 748, 750, 754, 756, 759, 761
            , 765, 767, 770, 772, 777, 779, 783, 785, 792, 794, 799, 801, 807, 809, 813, 815
            , 820, 822, 826, 828, 833, 835, 840, 842, 846, 848, 851, 853, 856, 858, 861, 863
            , 867, 869, 872, 874, 879, 881, 885, 887, 891, 893, 896, 898, 901, 903, 906, 908
            , 911, 913, 916, 918, 921, 923, 928, 930, 933, 935, 940, 942, 946, 948, 951, 953
            , 956, 958, 961, 963, 966, 968, 971, 973, 976, 978, 981, 983, 987, 989, 993, 996
            , 999, 1001, 1004, 1006, 1009, 1011, 1014, 1016, 1021, 1023, 1027, 1029, 1035, 1037, 1042, 1044
            , 1049, 1051, 1056, 1058, 1063, 1065, 1070, 1072, 1077, 1079, 1084, 1086, 1091, 1093, 1098, 1100
            , 1105, 1107, 1110, 1112, 1116, 1118, 1123
            , 0]
        self._parse = [0, 0
            , 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
            , 4, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 3, 3, 0, 3, 2, 0, 0, 0, 2, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 0, 7, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 0, 9, 9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 11, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 0, 10, 10, 0, 10, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 0, 0, 0, 13, 13, 0, 13, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 15, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 0, 0, 0, 0, 0, 28, 28, 0, 29, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 0, 0, 0, 37, 37, 0, 37, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 38, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 40, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 0, 0, 0, 41, 41, 0, 41, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 43, 0, 43, 0, 0, 0, 43, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 45, 0, 44, 0, 0, 0, 44, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 314, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 50, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 0, 56, 0, 56, 56, 56, 56,
                       315, 56, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 0, 0, 0, 58, 58, 0, 58, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 0, 0, 0, 59, 59, 0, 59, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 60, 0, 60, 0, 61, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 316, 0, 64, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 317, 69, 66, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 72, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
                       0, 0, 0, 71, 71, 0, 0, 71, 71, 71, 71, 71, 0, 0, 71, 71, 71, 71, 71, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 73, 0, 0, 0, 0, 0, 73, 0, 0, 0, 73, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0,
                       0, 0, 0, 73, 73, 0, 0, 73, 73, 73, 73, 73, 0, 0, 73, 73, 73, 73, 73, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 0, 0, 0, 74, 74, 0, 74, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 76, 0, 75, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 0, 78, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 82, 80, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319, 85, 0, 0, 0, 0, 0, 84, 0, 0, 0, 84, 0,
                       83, 83, 86, 86, 0, 87, 87, 87, 88, 88, 88, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
                       0, 0, 0, 0, 0, 0, 0, 0, 84, 84, 0, 0, 84, 84, 84, 84, 84, 0, 0, 84, 84, 84, 84, 84, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
                       91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 92, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
                       0, 0, 0, 92, 92, 0, 0, 92, 92, 92, 92, 92, 0, 0, 92, 92, 92, 92, 92, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 97, 97, 0, 0, 0, 0, 97, 0, 0, 0, 97, 0,
                       97, 97, 97, 97, 96, 97, 97, 97, 97, 97, 97, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
                       0, 0, 0, 0, 0, 0, 0, 0, 97, 97, 0, 0, 97, 97, 97, 97, 97, 0, 0, 97, 97, 97, 97, 97, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 98, 99, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 101, 102, 103, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 105, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
                       0, 0, 0, 0, 105, 105, 0, 0, 105, 105, 105, 105, 105, 0, 0, 105, 105, 105, 105, 105, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 106, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
                       0, 0, 0, 0, 106, 106, 0, 0, 106, 106, 106, 106, 106, 0, 0, 106, 106, 106, 106, 106, 0
            , 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 118, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
                       0, 0, 0, 0, 118, 118, 0, 0, 118, 118, 118, 118, 118, 0, 0, 118, 118, 118, 118, 118, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 119, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
                       0, 0, 0, 0, 119, 119, 0, 0, 119, 119, 119, 119, 119, 0, 0, 119, 119, 119, 119, 119, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 120, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0,
                       0, 0, 0, 0, 120, 120, 0, 0, 120, 120, 120, 120, 120, 0, 0, 120, 120, 120, 120, 120, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 121, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
                       0, 0, 0, 0, 121, 121, 0, 0, 121, 121, 121, 121, 121, 0, 0, 121, 121, 121, 121, 121, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 122, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
                       0, 0, 0, 0, 122, 122, 0, 0, 122, 122, 122, 122, 122, 0, 0, 122, 122, 122, 122, 122, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 123, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
                       0, 0, 0, 0, 123, 123, 0, 0, 123, 123, 123, 123, 123, 0, 0, 123, 123, 123, 123, 123, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 124, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
                       0, 0, 0, 0, 124, 124, 0, 0, 124, 124, 124, 124, 124, 0, 0, 124, 124, 124, 124, 124, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 125, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
                       0, 0, 0, 0, 125, 125, 0, 0, 125, 125, 125, 125, 125, 0, 0, 125, 125, 125, 125, 125, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 127, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 128, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
                       0, 0, 0, 0, 128, 128, 0, 0, 128, 128, 128, 128, 128, 0, 0, 128, 128, 128, 128, 128, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
                       131, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 133, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
                       0, 0, 0, 0, 133, 133, 0, 0, 133, 133, 133, 133, 133, 0, 0, 133, 133, 133, 133, 133, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       134, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 136, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
                       0, 0, 0, 0, 136, 136, 0, 0, 136, 136, 136, 136, 136, 0, 0, 136, 136, 136, 136, 136, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 137, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 139, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
                       0, 0, 0, 0, 139, 139, 0, 0, 139, 139, 139, 139, 139, 0, 0, 139, 139, 139, 139, 139, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 141, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 321, 0, 0, 0, 143, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0,
                       0, 0, 0, 0, 143, 143, 0, 0, 143, 143, 143, 143, 143, 0, 0, 143, 143, 143, 143, 143, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 148, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
                       0, 0, 0, 0, 148, 148, 0, 0, 146, 147, 322, 148, 148, 0, 0, 145, 145, 145, 145, 145, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
                       0, 0, 153, 154, 0, 0, 0, 0, 0, 155, 156, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 157, 157, 157, 157, 0
            , 0, 164, 164, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 164, 0, 159, 164, 158,
                       164, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 164, 164, 164, 164, 164, 164, 164, 164,
                       164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
                       162, 163, 0, 0, 0, 160, 161, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167, 166, 166, 166, 166, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 169, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 0,
                       0, 0, 0, 0, 169, 169, 0, 0, 169, 169, 169, 169, 169, 0, 0, 169, 169, 169, 169, 169, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 170, 171, 172, 173, 0
            , 174, 0, 0, 0, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 0, 0,
                       174, 174, 0, 174, 174, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 175
            , 0, 177, 0, 0, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 177, 0, 0,
                       176, 176, 0, 176, 177, 0, 0, 0, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0
            , 0, 179, 0, 0, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 179, 0, 0,
                       178, 178, 0, 178, 179, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0
            , 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 180, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 183, 182, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 185, 0, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 186, 0, 0, 0, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 0, 187, 0,
                       186, 186, 0, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 189, 0, 0, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 0, 0,
                       188, 188, 0, 188, 189, 0, 0, 0, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0
            , 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 0, 0, 0, 0, 0, 0, 190, 0, 0, 0, 190, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 193, 0, 0, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 193, 0, 0,
                       192, 192, 0, 192, 193, 0, 0, 0, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0
            , 0, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0, 0, 0, 194, 0, 0, 0, 194, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 197, 0, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 196,
                       0, 197, 197, 197, 197, 197, 197, 197, 0, 197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 0, 0, 198, 198,
                       199, 198, 199, 0, 0, 0, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 0, 0, 201, 200, 200,
                       0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 203, 0, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 205, 0, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 207, 206, 207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 209, 0, 208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 211, 0, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 213, 0, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 212,
                       0, 213, 213, 213, 213, 213, 213, 213, 0, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0
            , 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 216, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 219, 0, 0, 0, 0, 0, 0, 219, 0, 0, 0, 218, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0, 0, 0, 220, 0, 0, 221, 220, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
                       0, 0, 0, 0, 220, 220, 0, 0, 220, 220, 220, 220, 220, 0, 0, 220, 220, 220, 220, 220, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 224, 225, 0, 0, 0, 0, 0, 0, 225, 225, 225, 0,
                       225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 0, 0, 0, 0, 227, 227, 227, 0,
                       226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 233, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 233, 0, 0,
                       232, 232, 0, 232, 233, 233, 233, 0, 233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0
            , 0, 0, 0, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 234, 235, 234, 0,
                       234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 0, 0, 0, 236, 237, 236, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 0, 238, 0, 0, 239, 238, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0,
                       0, 0, 0, 0, 238, 238, 0, 0, 238, 238, 238, 238, 238, 0, 0, 238, 238, 238, 238, 238, 0
            , 0, 0, 0, 0, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 0, 0, 0, 240,
                       240, 0, 240, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 0, 0, 0, 0, 0, 0, 242, 0, 0, 243, 242, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 0, 0, 0, 0,
                       0, 0, 0, 0, 242, 242, 0, 0, 242, 242, 242, 242, 242, 0, 0, 242, 242, 242, 242, 242, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 0, 0, 0, 0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 0, 0, 0, 252, 252, 0,
                       252, 253, 253, 253, 0, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 254, 0, 254, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 257, 256, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 0, 0, 0, 258, 0, 0, 259, 258, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 0,
                       0, 0, 0, 0, 258, 258, 0, 0, 258, 258, 258, 258, 258, 0, 0, 258, 258, 258, 258, 258, 0
            , 0, 0, 0, 0, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 0, 0, 0, 260,
                       260, 0, 260, 0, 261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0, 0, 0, 262, 0, 0, 263, 262, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0,
                       0, 0, 0, 0, 262, 262, 0, 0, 262, 262, 262, 262, 262, 0, 0, 262, 262, 262, 262, 262, 0
            , 0, 0, 0, 0, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 0, 0, 0, 264,
                       264, 0, 264, 0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 266, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
                       0, 0, 0, 0, 266, 266, 0, 0, 266, 266, 266, 266, 266, 0, 0, 266, 266, 266, 266, 266, 0
            , 268, 269, 0, 0, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 269, 269,
                       269, 268, 268, 0, 268, 269, 0, 0, 0, 269, 0, 269, 269, 269, 269, 0, 269, 269, 269, 269, 269, 269,
                       269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 269, 0, 0, 0, 0, 0, 0, 0, 0, 269, 269, 0, 0,
                       269, 269, 269, 269, 269, 0, 0, 269, 269, 269, 269, 269, 0
            , 0, 270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270, 270, 271, 0, 0, 0, 0, 270, 0, 0, 0,
                       270, 0, 270, 270, 270, 270, 0, 270, 270, 270, 270, 270, 270, 270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 0, 0, 0, 0, 270, 270, 0, 0, 270, 270, 270, 270, 270, 0, 0, 270,
                       270, 270, 270, 270, 0
            , 0, 273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 272, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0,
                       0, 0, 0, 0, 272, 272, 0, 0, 272, 272, 272, 272, 272, 0, 0, 272, 272, 272, 272, 272, 0
            , 0, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 274, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
                       0, 0, 0, 0, 274, 274, 0, 0, 274, 274, 274, 274, 274, 0, 0, 274, 274, 274, 274, 274, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 276, 277, 0, 0, 276, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0,
                       0, 0, 0, 0, 276, 276, 0, 0, 276, 276, 276, 276, 276, 0, 0, 276, 276, 276, 276, 276, 0
            , 0, 279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278, 0, 0, 0, 0, 0, 0, 278, 0, 0, 0, 278, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278, 0, 0, 0, 0,
                       0, 0, 0, 0, 278, 278, 0, 0, 278, 278, 278, 278, 278, 0, 0, 278, 278, 278, 278, 278, 0
            , 0, 281, 0, 280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 281, 0, 0, 281, 0, 281, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 283, 282, 283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 283, 0, 0, 283, 0, 0, 283, 0, 283,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 285, 285, 285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 285, 0, 0, 285, 0, 0, 285, 0, 285,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 284,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 287, 287, 287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 287, 0, 0, 287, 0, 0, 287, 0, 287,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
                       286, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 289, 289, 289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 289, 0, 0, 289, 0, 0, 289, 0, 289,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
                       289, 288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 291, 291, 291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 291, 0, 0, 291, 0, 0, 291, 0, 291,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
                       291, 291, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 293, 293, 293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 293, 0, 0, 293, 0, 0, 293, 0, 293,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
                       293, 293, 293, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 295, 295, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 295, 0, 0, 295, 0, 0, 295, 0, 295,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
                       295, 295, 295, 295, 294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0
            , 0, 297, 297, 297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 297, 0, 0, 297, 0, 0, 297, 0, 297,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
                       297, 297, 297, 297, 297, 296, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0
            , 0, 299, 299, 299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 0, 0, 299, 0, 0, 299, 0, 299,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
                       299, 299, 299, 299, 299, 299, 299, 298, 298, 298, 298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0
            , 0, 301, 301, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 0, 0, 301, 0, 0, 301, 0, 301,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
                       301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 300, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0
            , 0, 303, 303, 303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 303, 0, 0, 303, 0, 303,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
                       303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 302, 302, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0
            , 0, 305, 305, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 0, 0, 305, 0, 0, 305, 0, 305,
                       304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
                       305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 304, 304, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 306, 307, 0, 0, 306, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
                       0, 0, 0, 0, 306, 306, 0, 0, 306, 306, 306, 306, 306, 0, 0, 306, 306, 306, 306, 306, 0
            , 0, 309, 309, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 0, 0, 309, 0, 309, 309, 309,
                       309, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 309, 309, 309, 309, 309, 309, 309, 309,
                       309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
                       309, 309, 0, 0, 0, 309, 309, 308, 0, 0, 0, 0, 0
            , 0, 0, 0, 310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                       ]
        self._parse_row = [0
            , 1, 87, 173, 259, 345, 431, 517, 603, 689, 775, 861, 947, 1033, 1119, 1205, 1291
            , 1377, 1463, 1549, 1635, 1721, 1807, 1893, 1979, 2065, 2151, 2237, 2323, 2409, 2495, 2581, 2667
            , 2753, 2839, 2925, 3011, 3097, 3183, 3269, 3355, 3441, 3527, 3613, 3699, 3785, 3871, 3957, 4043
            , 4129, 4215, 4301, 4387, 4473, 4559, 4645, 4731, 4817, 4903, 4989, 5075, 5161, 5247, 5333, 5419
            , 5505, 5591, 5677, 5763, 5849, 5935, 6021, 6107, 6193, 6279, 6365, 6451, 6537, 6623, 6709, 6795
            , 6881, 6967, 7053, 7139, 7225, 7311, 7397, 7483, 7569, 7655, 7741, 7827, 7913, 7999, 8085, 8171
            , 8257, 8343, 8429, 8515, 8601, 8687, 8773, 8859, 8945, 9031, 9117, 9203, 9289, 9375, 9461, 9547
            , 9633, 9719, 9805, 9891, 9977, 10063, 10149, 10235, 10321, 10407, 10493, 10579, 10665, 10751, 10837, 10923
            , 11009, 11095, 11181, 11267, 11353, 11439, 11525, 11611, 11697, 11783, 11869, 11955, 12041, 12127, 12213
            , 0]
        self._conflict = [0, 0

            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 0, 0, 54, 54, 0, 54, 0,
                          55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 63, 0, 0, 65, 65, 0, 65, 63,
                          65, 63, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 0, 0, 67, 67, 0, 67, 0,
                          68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 0, 0, 0, 79, 79, 0, 79, 77,
                          79, 77, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 84, 84, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 84, 0, 84, 0, 84, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
                          84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 0, 0, 0, 84, 84, 0, 0, 0, 0,
                          0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 143, 0, 0, 144, 144,
                          0, 144, 143, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 143, 143, 0, 0, 143, 143, 143, 143, 143, 0, 0,
                          143, 143, 143, 143, 143, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 149, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
                          0, 0, 0, 0, 0, 149, 149, 0, 0, 149, 149, 149, 149, 149, 0, 0, 149, 149, 149, 149, 149, 0
            , 0, 0, 0, 0, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 0, 0, 0, 228,
                          228, 0, 228, 0, 0, 0, 0, 0, 229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0
            , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 250, 251, 0, 0, 0, 0, 250, 0, 0, 0, 250,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
                          0, 0, 0, 0, 0, 0, 250, 250, 0, 0, 250, 250, 250, 250, 250, 0, 0, 250, 250, 250, 250, 250, 0

            , 0, 0, 0, 0, 0, 0, 0, 0, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 149, 0, 0, 150, 150,
                          0, 150, 149, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0, 149, 149, 0, 0, 149, 149, 149, 149, 149, 0, 0,
                          149, 149, 149, 149, 149, 0

                          ]
        self._conflict_row = [
            0

            , 1, 87, 173, 259, 345, 431, 517, 603, 689, 775, 861, 947, 1033, 1119
            , 0
        ]

    @property
    def parse_table(self):
        return self._parse

    @property
    def parse_row(self):
        return self._parse_row

    @property
    def conflict_table(self):
        return self._conflict

    @property
    def conflict_row(self):
        return self._conflict_row

    @property
    def production_table(self):
        return self._production

    @property
    def production_row(self):
        return self._production_row

    def is_non_terminal(self, symbol_index):
        return self.START_SYMBOL <= symbol_index < self.START_ACTION

    def is_terminal(self, symbol_index):
        return 0 < symbol_index < self.START_SYMBOL

    def is_action(self, symbol_index):
        return self.START_ACTION <= symbol_index < self.END_ACTION

    def get_symbol_type(self, symbol_index):
        symbol_type = self.NOT_A_SYMBOL

        if self.START_ACTION <= symbol_index < self.END_ACTION:
            symbol_type = self.ACTION_SYMBOL
        elif symbol_index >= self.START_SYMBOL:
            symbol_type = self.NONTERMINAL_SYMBOL
        elif symbol_index > 0:
            symbol_type = self.TERMINAL_SYMBOL
        return symbol_type

    def __setattr__(self, name, value):
        raise ValueError


class LabelVocabulary(object):
    def __init__(self, skl_constants):
        self._skl_constants = skl_constants
        self._terminal_names = ["0"
            , "typedef"
            , ";"
            , "="
            , ","
            , "auto"
            , "register"
            , "static"
            , "extern"
            , "void"
            , "char"
            , "short"
            , "int"
            , "long"
            , "float"
            , "double"
            , "signed"
            , "unsigned"
            , "TYPEDEF_NAME"
            , "const"
            , "volatile"
            , "IDENTIFIER"
            , "{"
            , "}"
            , "struct"
            , "union"
            , ":"
            , "enum"
            , "("
            , ")"
            , "["
            , "]"
            , "*"
            , "..."
            , "case"
            , "default"
            , "if"
            , "switch"
            , "else"
            , "while"
            , "do"
            , "for"
            , "goto"
            , "continue"
            , "break"
            , "return"
            , "*="
            , "/="
            , "%="
            , "+="
            , "-="
            , "<<="
            , ">>="
            , "&="
            , "^="
            , "|="
            , "?"
            , "||"
            , "&&"
            , "|"
            , "^"
            , "&"
            , "=="
            , "!="
            , "<"
            , ">"
            , "<="
            , ">="
            , "<<"
            , ">>"
            , "+"
            , "-"
            , "/"
            , "%"
            , "++"
            , "--"
            , "sizeof"
            , "~"
            , "!"
            , "."
            , "->"
            , "STRING"
            , "INTEGER_CONSTANT"
            , "CHARACTER_CONSTANT"
            , "FLOATING_CONSTANT"
            , "ENUMERATION_CONSTANT"
            , "END_OF_SLK_INPUT"]
        self._non_terminal_name = ["0"
            , "translation_unit"
            , "external_declaration"
            , "function_or_declaration"
            , "more_function_or_declaration"
            , "function_definition"
            , "declaration"
            , "declaration_specifier"
            , "storage_class_specifier"
            , "type_specifier"
            , "type_qualifier"
            , "struct_or_union_specifier"
            , "struct_or_union"
            , "struct_declarations"
            , "init_declarator_list"
            , "init_declarator_list2"
            , "init_declarator"
            , "specifier_qualifier"
            , "struct_declarator_list"
            , "struct_declarator"
            , "enum_specifier"
            , "enumerator_list"
            , "enumerator"
            , "declarator"
            , "direct_declarator"
            , "more_direct_declarator"
            , "pointer"
            , "parameter_type_list"
            , "parameter_declaration"
            , "declarator_or_abstract_declarator"
            , "direct_declarator_or_direct_abstract_declarator"
            , "more_dd_or_dad"
            , "identifier_list"
            , "initializer"
            , "initializer_list"
            , "type_name"
            , "abstract_declarator"
            , "direct_abstract_declarator"
            , "more_direct_abstract_declarator"
            , "statement"
            , "labeled_statement"
            , "expression_statement"
            , "compound_statement"
            , "selection_statement"
            , "more_if"
            , "iteration_statement"
            , "jump_statement"
            , "expression"
            , "assignment_expression"
            , "assignment_operator"
            , "conditional_expression"
            , "constant_expression"
            , "logical_OR_expression"
            , "logical_AND_expression"
            , "inclusive_OR_expression"
            , "exclusive_OR_expression"
            , "and_expression"
            , "equality_expression"
            , "equality_op"
            , "relational_expression"
            , "relational_op"
            , "shift_expression"
            , "shift_op"
            , "additive_expression"
            , "additive_op"
            , "multiplicitive_expression"
            , "multiplicitive_op"
            , "cast_expression"
            , "unary_expression"
            , "unary_operator"
            , "postfix_expression"
            , "more_postfix_expression"
            , "primary_expression"
            , "argument_expression_list"
            , "constant"
            , "external_declaration_*"
            , "declaration_specifier_*"
            , "declaration_specifier_2_*"
            , "init_declarator_list2_opt"
            , "=_initializer_opt"
            , ",_init_declarator_*"
            , "declaration_*"
            , "declaration_specifier_3_*"
            , "init_declarator_list_opt"
            , "declaration_specifier_4_*"
            , "init_declarator_list2_2_opt"
            , "{_struct_declarations_}_opt"
            , "specifier_qualifier_*"
            , "specifier_qualifier_specifier_qualifier_*_struct_declarator_list_;_*"
            , ",_init_declarator_2_*"
            , ",_init_declarator_3_*"
            , "=_initializer_2_opt"
            , ",_struct_declarator_*"
            , ":_constant_expression_opt"
            , "{_enumerator_list_}_opt"
            , ",_enumerator_*"
            , "=_constant_expression_opt"
            , "pointer_opt"
            , "constant_expression_opt"
            , "identifier_list_opt"
            , "type_qualifier_*"
            , "pointer_2_opt"
            , ",_parameter_declaration_*"
            , ",_..._opt"
            , "declaration_specifier_5_*"
            , "declarator_or_abstract_declarator_opt"
            , "direct_declarator_or_direct_abstract_declarator_opt"
            , "constant_expression_2_opt"
            , "parameter_type_list_opt"
            , "constant_expression_3_opt"
            , "identifier_list_2_opt"
            , ",_IDENTIFIER_*"
            , ",_opt"
            , ",_initializer_*"
            , "specifier_qualifier_2_*"
            , "abstract_declarator_opt"
            , "direct_abstract_declarator_opt"
            , "constant_expression_4_opt"
            , "parameter_type_list_2_opt"
            , "constant_expression_5_opt"
            , "parameter_type_list_3_opt"
            , "expression_opt"
            , "declaration_2_*"
            , "statement_*"
            , "expression_2_opt"
            , "expression_3_opt"
            , "expression_4_opt"
            , "expression_5_opt"
            , ",_assignment_expression_*"
            , "assignment_operator_assignment_expression_opt"
            , "?_expression_:_conditional_expression_opt"
            , "||_logical_AND_expression_*"
            , "&&_inclusive_OR_expression_*"
            , "|_exclusive_OR_expression_*"
            , "^_and_expression_*"
            , "&_equality_expression_*"
            , "equality_op_relational_expression_*"
            , "relational_op_shift_expression_*"
            , "shift_op_additive_expression_*"
            , "additive_op_multiplicitive_expression_*"
            , "multiplicitive_op_cast_expression_*"
            , "argument_expression_list_opt"
            , "STRING_*"
            , ",_assignment_expression_2_*"]
        self._action_name = ["0", "__FinishParse", "__SetTypedefName", "__NewScope", "__ReleaseScope"]
        self._production_name = ["0"
            , "translation_unit --> external_declaration_*"
            , "external_declaration --> declarator function_definition"
            , "external_declaration --> declaration_specifier declaration_specifier_* function_or_declaration"
            ,
                                 "external_declaration --> typedef declaration_specifier declaration_specifier_2_* init_declarator_list2_opt ;"
            , "function_or_declaration --> declarator more_function_or_declaration"
            , "function_or_declaration --> ;"
            , "more_function_or_declaration --> function_definition"
            , "more_function_or_declaration --> =_initializer_opt ,_init_declarator_* ;"
            , "function_definition --> declaration_* compound_statement"
            , "declaration --> declaration_specifier declaration_specifier_3_* init_declarator_list_opt ;"
            , "declaration --> typedef declaration_specifier declaration_specifier_4_* init_declarator_list2_2_opt ;"
            , "declaration_specifier --> storage_class_specifier"
            , "declaration_specifier --> type_specifier"
            , "declaration_specifier --> type_qualifier"
            , "storage_class_specifier --> auto"
            , "storage_class_specifier --> register"
            , "storage_class_specifier --> static"
            , "storage_class_specifier --> extern"
            , "type_specifier --> void"
            , "type_specifier --> char"
            , "type_specifier --> short"
            , "type_specifier --> int"
            , "type_specifier --> long"
            , "type_specifier --> float"
            , "type_specifier --> double"
            , "type_specifier --> signed"
            , "type_specifier --> unsigned"
            , "type_specifier --> struct_or_union_specifier"
            , "type_specifier --> enum_specifier"
            , "type_specifier --> TYPEDEF_NAME"
            , "type_qualifier --> const"
            , "type_qualifier --> volatile"
            , "struct_or_union_specifier --> struct_or_union IDENTIFIER {_struct_declarations_}_opt"
            , "struct_or_union_specifier --> struct_or_union { struct_declarations }"
            , "struct_or_union --> struct"
            , "struct_or_union --> union"
            ,
                                 "struct_declarations --> specifier_qualifier specifier_qualifier_* struct_declarator_list ; specifier_qualifier_specifier_qualifier_*_struct_declarator_list_;_*"
            , "init_declarator_list --> init_declarator ,_init_declarator_2_*"
            , "init_declarator_list2 --> init_declarator __SetTypedefName ,_init_declarator_3_*"
            , "init_declarator --> declarator =_initializer_2_opt"
            , "specifier_qualifier --> type_specifier"
            , "specifier_qualifier --> type_qualifier"
            , "struct_declarator_list --> struct_declarator ,_struct_declarator_*"
            , "struct_declarator --> declarator :_constant_expression_opt"
            , "struct_declarator --> : constant_expression"
            , "enum_specifier --> enum { enumerator_list }"
            , "enum_specifier --> enum IDENTIFIER {_enumerator_list_}_opt"
            , "enumerator_list --> enumerator ,_enumerator_*"
            , "enumerator --> IDENTIFIER =_constant_expression_opt"
            , "declarator --> pointer_opt direct_declarator"
            , "direct_declarator --> IDENTIFIER more_direct_declarator"
            , "direct_declarator --> ( declarator ) more_direct_declarator"
            , "more_direct_declarator --> [ constant_expression_opt ] more_direct_declarator"
            , "more_direct_declarator --> __NewScope ( parameter_type_list __ReleaseScope ) more_direct_declarator"
            , "more_direct_declarator --> ( identifier_list_opt ) more_direct_declarator"
            , "more_direct_declarator -->"
            , "pointer --> * type_qualifier_* pointer_2_opt"
            , "parameter_type_list --> parameter_declaration ,_parameter_declaration_* ,_..._opt"
            ,
                                 "parameter_declaration --> declaration_specifier declaration_specifier_5_* declarator_or_abstract_declarator_opt"
            , "declarator_or_abstract_declarator --> direct_declarator_or_direct_abstract_declarator"
            , "declarator_or_abstract_declarator --> pointer direct_declarator_or_direct_abstract_declarator_opt"
            , "direct_declarator_or_direct_abstract_declarator --> IDENTIFIER more_dd_or_dad"
            , "direct_declarator_or_direct_abstract_declarator --> ( declarator_or_abstract_declarator ) more_dd_or_dad"
            , "direct_declarator_or_direct_abstract_declarator --> [ constant_expression_2_opt ] more_dd_or_dad"
            , "direct_declarator_or_direct_abstract_declarator --> ( parameter_type_list_opt ) more_dd_or_dad"
            , "more_dd_or_dad --> [ constant_expression_3_opt ] more_dd_or_dad"
            , "more_dd_or_dad --> ( parameter_type_list ) more_dd_or_dad"
            , "more_dd_or_dad --> ( identifier_list_2_opt ) more_dd_or_dad"
            , "more_dd_or_dad -->"
            , "identifier_list --> IDENTIFIER ,_IDENTIFIER_*"
            , "initializer --> assignment_expression"
            , "initializer --> { initializer_list ,_opt }"
            , "initializer_list --> initializer ,_initializer_*"
            , "type_name --> specifier_qualifier specifier_qualifier_2_* abstract_declarator_opt"
            , "abstract_declarator --> pointer direct_abstract_declarator_opt"
            , "abstract_declarator --> direct_abstract_declarator"
            , "direct_abstract_declarator --> ( abstract_declarator ) more_direct_abstract_declarator"
            , "direct_abstract_declarator --> [ constant_expression_4_opt ] more_direct_abstract_declarator"
            , "direct_abstract_declarator --> ( parameter_type_list_2_opt ) more_direct_abstract_declarator"
            , "more_direct_abstract_declarator --> [ constant_expression_5_opt ] more_direct_abstract_declarator"
            , "more_direct_abstract_declarator --> ( parameter_type_list_3_opt ) more_direct_abstract_declarator"
            , "more_direct_abstract_declarator -->"
            , "statement --> labeled_statement"
            , "statement --> expression_statement"
            , "statement --> compound_statement"
            , "statement --> selection_statement"
            , "statement --> iteration_statement"
            , "statement --> jump_statement"
            , "labeled_statement --> IDENTIFIER : statement"
            , "labeled_statement --> case constant_expression : statement"
            , "labeled_statement --> default : statement"
            , "expression_statement --> expression_opt ;"
            , "compound_statement --> __NewScope { declaration_2_* statement_* }"
            , "selection_statement --> if ( expression ) statement more_if"
            , "selection_statement --> switch ( expression ) statement"
            , "more_if --> else statement"
            , "more_if -->"
            , "iteration_statement --> while ( expression ) statement"
            , "iteration_statement --> do statement while ( expression ) ;"
            , "iteration_statement --> for ( expression_2_opt ; expression_3_opt ; expression_4_opt ) statement"
            , "jump_statement --> goto IDENTIFIER ;"
            , "jump_statement --> continue ;"
            , "jump_statement --> break ;"
            , "jump_statement --> return expression_5_opt ;"
            , "expression --> assignment_expression ,_assignment_expression_*"
            , "assignment_expression --> conditional_expression assignment_operator_assignment_expression_opt"
            , "assignment_operator --> ="
            , "assignment_operator --> *="
            , "assignment_operator --> /="
            , "assignment_operator --> %="
            , "assignment_operator --> +="
            , "assignment_operator --> -="
            , "assignment_operator --> <<="
            , "assignment_operator --> >>="
            , "assignment_operator --> &="
            , "assignment_operator --> ^="
            , "assignment_operator --> |="
            , "conditional_expression --> logical_OR_expression ?_expression_:_conditional_expression_opt"
            , "constant_expression --> conditional_expression"
            , "logical_OR_expression --> logical_AND_expression ||_logical_AND_expression_*"
            , "logical_AND_expression --> inclusive_OR_expression &&_inclusive_OR_expression_*"
            , "inclusive_OR_expression --> exclusive_OR_expression |_exclusive_OR_expression_*"
            , "exclusive_OR_expression --> and_expression ^_and_expression_*"
            , "and_expression --> equality_expression &_equality_expression_*"
            , "equality_expression --> relational_expression equality_op_relational_expression_*"
            , "equality_op --> =="
            , "equality_op --> !="
            , "relational_expression --> shift_expression relational_op_shift_expression_*"
            , "relational_op --> <"
            , "relational_op --> >"
            , "relational_op --> <="
            , "relational_op --> >="
            , "shift_expression --> additive_expression shift_op_additive_expression_*"
            , "shift_op --> <<"
            , "shift_op --> >>"
            , "additive_expression --> multiplicitive_expression additive_op_multiplicitive_expression_*"
            , "additive_op --> +"
            , "additive_op --> -"
            , "multiplicitive_expression --> cast_expression multiplicitive_op_cast_expression_*"
            , "multiplicitive_op --> *"
            , "multiplicitive_op --> /"
            , "multiplicitive_op --> %"
            , "cast_expression --> unary_expression"
            , "cast_expression --> ( type_name ) cast_expression"
            , "unary_expression --> postfix_expression"
            , "unary_expression --> ++ unary_expression"
            , "unary_expression --> -- unary_expression"
            , "unary_expression --> unary_operator cast_expression"
            , "unary_expression --> sizeof unary_expression"
            , "unary_expression --> sizeof ( type_name )"
            , "unary_operator --> &"
            , "unary_operator --> *"
            , "unary_operator --> +"
            , "unary_operator --> -"
            , "unary_operator --> ~"
            , "unary_operator --> !"
            , "postfix_expression --> primary_expression more_postfix_expression"
            , "more_postfix_expression --> [ expression ] more_postfix_expression"
            , "more_postfix_expression --> ( argument_expression_list_opt ) more_postfix_expression"
            , "more_postfix_expression --> . IDENTIFIER more_postfix_expression"
            , "more_postfix_expression --> -> IDENTIFIER more_postfix_expression"
            , "more_postfix_expression --> ++ more_postfix_expression"
            , "more_postfix_expression --> -- more_postfix_expression"
            , "more_postfix_expression -->"
            , "primary_expression --> IDENTIFIER"
            , "primary_expression --> constant"
            , "primary_expression --> STRING STRING_*"
            , "primary_expression --> ( expression )"
            , "argument_expression_list --> assignment_expression ,_assignment_expression_2_*"
            , "constant --> INTEGER_CONSTANT"
            , "constant --> CHARACTER_CONSTANT"
            , "constant --> FLOATING_CONSTANT"
            , "constant --> ENUMERATION_CONSTANT"
            , "external_declaration_* --> external_declaration external_declaration_*"
            , "external_declaration_* --> __FinishParse"
            , "declaration_specifier_* --> declaration_specifier declaration_specifier_*"
            , "declaration_specifier_* -->"
            , "declaration_specifier_2_* --> declaration_specifier declaration_specifier_2_*"
            , "declaration_specifier_2_* -->"
            , "init_declarator_list2_opt --> init_declarator_list2"
            , "init_declarator_list2_opt -->"
            , "=_initializer_opt --> = initializer"
            , "=_initializer_opt -->"
            , ",_init_declarator_* --> , init_declarator ,_init_declarator_*"
            , ",_init_declarator_* -->"
            , "declaration_* --> declaration declaration_*"
            , "declaration_* -->"
            , "declaration_specifier_3_* --> declaration_specifier declaration_specifier_3_*"
            , "declaration_specifier_3_* -->"
            , "init_declarator_list_opt --> init_declarator_list"
            , "init_declarator_list_opt -->"
            , "declaration_specifier_4_* --> declaration_specifier declaration_specifier_4_*"
            , "declaration_specifier_4_* -->"
            , "init_declarator_list2_2_opt --> init_declarator_list2"
            , "init_declarator_list2_2_opt -->"
            , "{_struct_declarations_}_opt --> { struct_declarations }"
            , "{_struct_declarations_}_opt -->"
            , "specifier_qualifier_* --> specifier_qualifier specifier_qualifier_*"
            , "specifier_qualifier_* -->"
            ,
                                 "specifier_qualifier_specifier_qualifier_*_struct_declarator_list_;_* --> specifier_qualifier specifier_qualifier_* struct_declarator_list ; specifier_qualifier_specifier_qualifier_*_struct_declarator_list_;_*"
            , "specifier_qualifier_specifier_qualifier_*_struct_declarator_list_;_* -->"
            , ",_init_declarator_2_* --> , init_declarator ,_init_declarator_2_*"
            , ",_init_declarator_2_* -->"
            , ",_init_declarator_3_* --> , init_declarator __SetTypedefName ,_init_declarator_3_*"
            , ",_init_declarator_3_* -->"
            , "=_initializer_2_opt --> = initializer"
            , "=_initializer_2_opt -->"
            , ",_struct_declarator_* --> , struct_declarator ,_struct_declarator_*"
            , ",_struct_declarator_* -->"
            , ":_constant_expression_opt --> : constant_expression"
            , ":_constant_expression_opt -->"
            , "{_enumerator_list_}_opt --> { enumerator_list }"
            , "{_enumerator_list_}_opt -->"
            , ",_enumerator_* --> , enumerator ,_enumerator_*"
            , ",_enumerator_* -->"
            , "=_constant_expression_opt --> = constant_expression"
            , "=_constant_expression_opt -->"
            , "pointer_opt --> pointer"
            , "pointer_opt -->"
            , "constant_expression_opt --> constant_expression"
            , "constant_expression_opt -->"
            , "identifier_list_opt --> identifier_list"
            , "identifier_list_opt -->"
            , "type_qualifier_* --> type_qualifier type_qualifier_*"
            , "type_qualifier_* -->"
            , "pointer_2_opt --> pointer"
            , "pointer_2_opt -->"
            , ",_parameter_declaration_* --> , parameter_declaration ,_parameter_declaration_*"
            , ",_parameter_declaration_* -->"
            , ",_..._opt --> , ..."
            , ",_..._opt -->"
            , "declaration_specifier_5_* --> declaration_specifier declaration_specifier_5_*"
            , "declaration_specifier_5_* -->"
            , "declarator_or_abstract_declarator_opt --> declarator_or_abstract_declarator"
            , "declarator_or_abstract_declarator_opt -->"
            , "direct_declarator_or_direct_abstract_declarator_opt --> direct_declarator_or_direct_abstract_declarator"
            , "direct_declarator_or_direct_abstract_declarator_opt -->"
            , "constant_expression_2_opt --> constant_expression"
            , "constant_expression_2_opt -->"
            , "parameter_type_list_opt --> parameter_type_list"
            , "parameter_type_list_opt -->"
            , "constant_expression_3_opt --> constant_expression"
            , "constant_expression_3_opt -->"
            , "identifier_list_2_opt --> identifier_list"
            , "identifier_list_2_opt -->"
            , ",_IDENTIFIER_* --> , IDENTIFIER ,_IDENTIFIER_*"
            , ",_IDENTIFIER_* -->"
            , ",_opt --> ,"
            , ",_opt -->"
            , ",_initializer_* --> , initializer ,_initializer_*"
            , ",_initializer_* -->"
            , "specifier_qualifier_2_* --> specifier_qualifier specifier_qualifier_2_*"
            , "specifier_qualifier_2_* -->"
            , "abstract_declarator_opt --> abstract_declarator"
            , "abstract_declarator_opt -->"
            , "direct_abstract_declarator_opt --> direct_abstract_declarator"
            , "direct_abstract_declarator_opt -->"
            , "constant_expression_4_opt --> constant_expression"
            , "constant_expression_4_opt -->"
            , "parameter_type_list_2_opt --> parameter_type_list"
            , "parameter_type_list_2_opt -->"
            , "constant_expression_5_opt --> constant_expression"
            , "constant_expression_5_opt -->"
            , "parameter_type_list_3_opt --> parameter_type_list"
            , "parameter_type_list_3_opt -->"
            , "expression_opt --> expression"
            , "expression_opt -->"
            , "declaration_2_* --> declaration declaration_2_*"
            , "declaration_2_* -->"
            , "statement_* --> statement statement_*"
            , "statement_* --> __ReleaseScope"
            , "expression_2_opt --> expression"
            , "expression_2_opt -->"
            , "expression_3_opt --> expression"
            , "expression_3_opt -->"
            , "expression_4_opt --> expression"
            , "expression_4_opt -->"
            , "expression_5_opt --> expression"
            , "expression_5_opt -->"
            , ",_assignment_expression_* --> , assignment_expression ,_assignment_expression_*"
            , ",_assignment_expression_* -->"
            , "assignment_operator_assignment_expression_opt --> assignment_operator assignment_expression"
            , "assignment_operator_assignment_expression_opt -->"
            , "?_expression_:_conditional_expression_opt --> ? expression : conditional_expression"
            , "?_expression_:_conditional_expression_opt -->"
            , "||_logical_AND_expression_* --> || logical_AND_expression ||_logical_AND_expression_*"
            , "||_logical_AND_expression_* -->"
            , "&&_inclusive_OR_expression_* --> && inclusive_OR_expression &&_inclusive_OR_expression_*"
            , "&&_inclusive_OR_expression_* -->"
            , "|_exclusive_OR_expression_* --> | exclusive_OR_expression |_exclusive_OR_expression_*"
            , "|_exclusive_OR_expression_* -->"
            , "^_and_expression_* --> ^ and_expression ^_and_expression_*"
            , "^_and_expression_* -->"
            , "&_equality_expression_* --> & equality_expression &_equality_expression_*"
            , "&_equality_expression_* -->"
            ,
                                 "equality_op_relational_expression_* --> equality_op relational_expression equality_op_relational_expression_*"
            , "equality_op_relational_expression_* -->"
            , "relational_op_shift_expression_* --> relational_op shift_expression relational_op_shift_expression_*"
            , "relational_op_shift_expression_* -->"
            , "shift_op_additive_expression_* --> shift_op additive_expression shift_op_additive_expression_*"
            , "shift_op_additive_expression_* -->"
            ,
                                 "additive_op_multiplicitive_expression_* --> additive_op multiplicitive_expression additive_op_multiplicitive_expression_*"
            , "additive_op_multiplicitive_expression_* -->"
            ,
                                 "multiplicitive_op_cast_expression_* --> multiplicitive_op cast_expression multiplicitive_op_cast_expression_*"
            , "multiplicitive_op_cast_expression_* -->"
            , "argument_expression_list_opt --> argument_expression_list"
            , "argument_expression_list_opt -->"
            , "STRING_* --> STRING STRING_*"
            , "STRING_* -->"
            , ",_assignment_expression_2_* --> , assignment_expression ,_assignment_expression_2_*"
            , ",_assignment_expression_2_* -->"]

        self._label_to_id = {
        "TYPEDEF": 1,
        "SEMI_": 2,
        "EQUAL_": 3,
        "COMMA_": 4,
        "AUTO_": 5,
        "REGISTER_": 6,
        "STATIC_": 7,
        "EXTERN_": 8,
        "VOID_": 9,
        "CHAR_": 10,
        "SHORT_": 11,
        "INT_": 12,
        "LONG_": 13,
        "FLOAT_": 14,
        "DOUBLE_": 15,
        "SIGNED_": 16,
        "UNSIGNED_": 17,
        "TYPEDEF_NAME_": 18,
        public
        static
        final
        short
        CONST_ = 19;
        public
        static
        final
        short
        VOLATILE_ = 20;
        public
        static
        final
        short
        IDENTIFIER_ = 21;
        public
        static
        final
        short
        LBRACE_ = 22;
        public
        static
        final
        short
        RBRACE_ = 23;
        public
        static
        final
        short
        STRUCT_ = 24;
        public
        static
        final
        short
        UNION_ = 25;
        public
        static
        final
        short
        COLON_ = 26;
        public
        static
        final
        short
        ENUM_ = 27;
        public
        static
        final
        short
        LPAREN_ = 28;
        public
        static
        final
        short
        RPAREN_ = 29;
        public
        static
        final
        short
        LBRACK_ = 30;
        public
        static
        final
        short
        RBRACK_ = 31;
        public
        static
        final
        short
        STAR_ = 32;
        public
        static
        final
        short
        DOT_DOT_DOT_ = 33;
        public
        static
        final
        short
        CASE_ = 34;
        public
        static
        final
        short
        DEFAULT_ = 35;
        public
        static
        final
        short
        IF_ = 36;
        public
        static
        final
        short
        SWITCH_ = 37;
        public
        static
        final
        short
        ELSE_ = 38;
        public
        static
        final
        short
        WHILE_ = 39;
        public
        static
        final
        short
        DO_ = 40;
        public
        static
        final
        short
        FOR_ = 41;
        public
        static
        final
        short
        GOTO_ = 42;
        public
        static
        final
        short
        CONTINUE_ = 43;
        public
        static
        final
        short
        BREAK_ = 44;
        public
        static
        final
        short
        RETURN_ = 45;
        public
        static
        final
        short
        STAR_EQUAL_ = 46;
        public
        static
        final
        short
        SLASH_EQUAL_ = 47;
        public
        static
        final
        short
        PERCENT_EQUAL_ = 48;
        public
        static
        final
        short
        PLUS_EQUAL_ = 49;
        public
        static
        final
        short
        MINUS_EQUAL_ = 50;
        public
        static
        final
        short
        LESS_LESS_EQUAL_ = 51;
        public
        static
        final
        short
        GREATER_GREATER_EQUAL_ = 52;
        public
        static
        final
        short
        AND_EQUAL_ = 53;
        public
        static
        final
        short
        CARET_EQUAL_ = 54;
        public
        static
        final
        short
        OR_EQUAL_ = 55;
        public
        static
        final
        short
        QMARK_ = 56;
        public
        static
        final
        short
        OR_OR_ = 57;
        public
        static
        final
        short
        AND_AND_ = 58;
        public
        static
        final
        short
        OR_ = 59;
        public
        static
        final
        short
        CARET_ = 60;
        public
        static
        final
        short
        AND_ = 61;
        public
        static
        final
        short
        EQUAL_EQUAL_ = 62;
        public
        static
        final
        short
        NOT_EQUAL_ = 63;
        public
        static
        final
        short
        LESS_ = 64;
        public
        static
        final
        short
        GREATER_ = 65;
        public
        static
        final
        short
        LESS_EQUAL_ = 66;
        public
        static
        final
        short
        GREATER_EQUAL_ = 67;
        public
        static
        final
        short
        LESS_LESS_ = 68;
        public
        static
        final
        short
        GREATER_GREATER_ = 69;
        public
        static
        final
        short
        PLUS_ = 70;
        public
        static
        final
        short
        MINUS_ = 71;
        public
        static
        final
        short
        SLASH_ = 72;
        public
        static
        final
        short
        PERCENT_ = 73;
        public
        static
        final
        short
        PLUS_PLUS_ = 74;
        public
        static
        final
        short
        MINUS_MINUS_ = 75;
        public
        static
        final
        short
        SIZEOF_ = 76;
        public
        static
        final
        short
        TILDE_ = 77;
        public
        static
        final
        short
        NOT_ = 78;
        public
        static
        final
        short
        DOT_ = 79;
        public
        static
        final
        short
        MINUS_GREATER_ = 80;
        public
        static
        final
        short
        STRING_ = 81;
        public
        static
        final
        short
        INTEGER_CONSTANT_ = 82;
        public
        static
        final
        short
        CHARACTER_CONSTANT_ = 83;
        public
        static
        final
        short
        FLOATING_CONSTANT_ = 84;
        public
        static
        final
        short
        ENUMERATION_CONSTANT_ = 85;
        public
        static
        final
        short
        END_OF_SLK_INPUT_ = 86;
        }

    def get_symbol_name(self, symbol_index):
        if self._skl_constants.START_ACTION <= symbol_index < self._skl_constants.END_ACTION:
            return self._action_name[symbol_index - (self._skl_constants.START_ACTION - 1)]
        elif symbol_index >= self._skl_constants.START_SYMBOL:
            return self._non_terminal_name[symbol_index - (self._skl_constants.START_SYMBOL - 1)]
        elif symbol_index > 0:
            return self._terminal_names[symbol_index]
        raise ValueError("The symbol index {} is out of range".format(symbol_index))

    def get_production_name(self, production_number):
        return self._production_name[production_number]


class LexTokens(metaclass=abc.ABCMeta):

    @abc.abstractmethod
    def get(self):
        """
        :return: the next token
        """

    @abc.abstractmethod
    def peek(self, level):
        """
        :param level: the lookhead level
        :return: the lookhead tokens
        """


class SLKParser(object):
    def __init__(self, skl_constants: SLKConstants):
        self._sklconstants = skl_constants

    def parse(self,
              tokens: LexTokens):
        stack = []
        stack.append(0)
        start_symbol = self._sklconstants.START_SYMBOL
        stack.append(start_symbol)
        token = tokens.get()
        new_token = token
        START_CONFLICT = self._sklconstants.START_CONFLICT
        while stack[-1] != 0:
            symbol = stack.pop()
            if self._sklconstants.is_action(symbol):
                pass
            elif self._sklconstants.is_non_terminal(symbol):
                entry = 0
                level = 1
                if entry == 0:
                    index = self._sklconstants.parse_row[symbol - (start_symbol - 1)]
                    index += token
                    entry = self._sklconstants.parse_table[index]
                while entry >= START_CONFLICT:
                    index = self._sklconstants.conflict_row[entry - (START_CONFLICT - 1)]
                    index += tokens.peek(level)
                    entry = self._sklconstants.conflict_table[index]
                    level += 1
                if entry != 0:
                    index = self._sklconstants.production_row[entry]
                    production_length = self._sklconstants.production_table[index] - 1
                    index += 1
                    lhs = self._sklconstants.production_table[index]
                    if lhs == symbol:
                        index += production_length
                        for _ in range(production_length):
                            stack.append(self._sklconstants.production_table[index])
                            index -= 1
                    else:
                        raise ValueError
                else:
                    raise ValueError
            elif self._sklconstants.is_terminal(symbol):
                if symbol == token:
                    token = tokens.get()
                    new_token = token
                else:
                    raise ValueError
            else:
                raise ValueError("The symbol should not in the grammar")
        if token != self._sklconstants.END_OF_SLK_INPUT_:
            raise ValueError("The input too short")
